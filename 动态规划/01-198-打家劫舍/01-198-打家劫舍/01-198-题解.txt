题目描述
链接：https://leetcode-cn.com/problems/house-robber
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

 

示例 1：

输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2：

输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

题解：
由于存在防盗系统，所以小偷不能对相邻的房屋进行偷窃
1、首先判断是否存在房屋，if(nums.empty()) {return 0;}
2、当只存在一间房屋时，小偷所偷的金额只有这一间房屋的金额，if(nums.size() == 1) {return nums[0];}
3、当房屋数量为两间时，小偷会选择其中较大金额的房屋进行偷窃 max(nums[0],nums[1]);
4、当房屋数量大于两间时，则会出现以下情况：
      （1）假设偷窃第i间房，则不能偷窃第i-1间房，偷窃的总金额为前i-2将房的最高金额与第i间房的金额之和；
      （2）假设不偷第i间房，则偷窃的总金额为前i-1将房的最高金额

综上所述：
初始条件：dp[0] = nums[0],dp[1] = max(nums[0],nums[1])
状态转移方程：dp[i] = max(nums[i-1],nums[i-1]+nums[i])
返回值：dp[nums.size()-1]

时间复杂度：O(n)，其中n=nums.size()-1;
空间复杂度：O(1)